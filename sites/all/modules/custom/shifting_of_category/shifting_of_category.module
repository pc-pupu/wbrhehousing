<?php
	
	
	
	function shifting_of_category_init() {
		 global $custom_url;	//comment off for live
		 //echo $custom_url.'<br>'. $_SERVER['REQUEST_URI'];die;
		 if($_SERVER['REQUEST_URI'] == $custom_url.'/cs'){	//delete $custom_url. for live
			$result = fetch_cs_app_status(array('draft'));
			$row_count = $result->rowCount();
			if($row_count > 0) {
				
				$data = $result->fetchObject();
				// print_r($data);die;
				///////////debaleena 27-11-2024////////
				if(isset($data->status) && $data->status == 'offer_letter_cancel'){
					drupal_goto('cs/');
				}else{
					drupal_goto('view-application/'.encrypt_url($data->online_application_id));
				}
				///end/////////
				//drupal_goto('view-application/'.encrypt_url($data->online_application_id));
			}
		}
	}
				  
	 function shifting_of_category_menu() {
	
		$items['cs'] = array(
		  'title' => 'Application for Category Shifting',	
		  //'page callback' => 'new_application_page',
		  'page callback' => 'drupal_get_form',
		  'page arguments' => array('application_form'),
		  'access arguments' => array('administer Application for Shifting of Category'),
		);
		return $items;
	  }
  
  
  function shifting_of_category_form_application_form_alter(&$form, &$form_state, $form_id) {
	global $user;  
	fetch_cs_data1($form);
	
	$occupation_estate_default = isset($form['current_occupation_cs']['cs_occupation_estate']['#default_value']) && !empty($form['current_occupation_cs']['cs_occupation_estate']['#default_value']) ? $form['current_occupation_cs']['cs_occupation_estate']['#default_value'] : '';
	
	$occupation_block_default = isset($form['current_occupation_cs']['cs_occupation_block']['#default_value']) && !empty($form['current_occupation_cs']['cs_occupation_block']['#default_value']) ? $form['current_occupation_cs']['cs_occupation_block']['#default_value'] : '';
	
	$occupation_estate = isset($form_state['values']['cs_occupation_estate']) && !empty($form_state['values']['cs_occupation_estate']) ? $form_state['values']['cs_occupation_estate'] : $occupation_estate_default;
	
	$occupation_block = isset($form_state['values']['cs_occupation_block']) && !empty($form_state['values']['cs_occupation_block']) ? $form_state['values']['cs_occupation_block'] : $occupation_block_default;
	  
	global $custom_url;	//comment off for live
	  if($form['#action'] == $custom_url.'/cs'){		//delete $custom_url. for live
		
		$form['prrsonal_info']['online_cs_id'] = array(
			'#type' => 'hidden',
			'#default_value' => '0',
			//'#validated' => TRUE,
		);



		////////debaleena 14.06.24///////
		$query = db_select('housing_applicant_official_detail', 'haod');
		$query->innerJoin('housing_online_application', 'hoa',
		'hoa.applicant_official_detail_id = haod.applicant_official_detail_id');
		$query->innerJoin('housing_flat_occupant', 'hfo', 
		'hfo.online_application_id = hoa.online_application_id');
		
		$query->innerJoin('housing_flat', 'hf', 'hf.flat_id = hfo.flat_id');
		$query->innerJoin('housing_estate', 'he', 'hf.estate_id = he.estate_id');
		$query->innerJoin('housing_flat_type', 'hft', 'hf.flat_type_id = hft.flat_type_id');
		$query->innerJoin('housing_block', 'hb', 'hf.block_id = hb.block_id');
		$query->addField('hf', 'flat_id');
		$query->addField('hft', 'flat_type_id');
		$query->addField('he', 'estate_id');
		$query->addField('hb', 'block_id');
		$query->addField('hb', 'block_name');
		$query->addField('he', 'estate_name');
		$query->addField('hf', 'flat_no');
		
		$query->addField('hfo', 'flat_occupant_id');
		$query->condition('haod.uid', $user->uid, '=');
		$query->condition('haod.is_active', 1 , '=');   //added by dg 17-12-2024

		$fetch_data = $query->execute();
		$fetch_data = $fetch_data->fetchObject();
		
		if(isset($fetch_data->flat_no) && $fetch_data->flat_no != ''){  ////// add at 09-07-2024

			$housing_estate_arr_1[$fetch_data->estate_id]=$fetch_data->estate_name;
			$housing_block_arr_1[$fetch_data->block_id]=$fetch_data->block_name;
			$housing_flat_arr_1[$fetch_data->flat_id]=$fetch_data->flat_no;
		// print_r($housing_estate_arr_1);die;
		//print_r($housing_block_arr_1);
		//print_r($housing_flat_arr_1);die;
		}else{
			drupal_goto('dashboard');    ////// add at 09-07-2024
		}

		//////end///////
		  
	    $form['current_occupation_cs'] = array(
			'#type' => 'fieldset',
			'#title' => t('Current Occupation Specification'),
			'#collapsible' => FALSE, // Added
			'#collapsed' => FALSE,  // Added
		);
		$form['current_occupation_cs']['occupation_estate_start'] = array(
			'#type' => 'markup',
			'#markup' => '<div class="row">'
		);
		
		$form['current_occupation_cs']['cs_occupation_estate'] = array(
			'#title' => t('Select Housing'),
			'#type' => 'select',
			//'#options' => get_housing_estate_cs(),
			'#options' => ($fetch_data->estate_id !='') ? $housing_estate_arr_1 : get_housing_estate_cs(),
			// '#options' => $housing_estate_arr_1,
			'#default_value' => ($fetch_data->estate_id !='') ? $fetch_data->estate_id : $occupation_estate,
			// '#default_value' => $fetch_data->estate_id,

			'#required' => TRUE,
			'#ajax' => array(
						   'event' => 'change',
						   'callback' => '_reload_block_no_cs',
						   'effect' => 'fade',
						   'progress' => array(
							  'type' => 'throbber',
							  'message' => '',
							),
				),
			'#prefix' => '<div class="col-md-6"><div class="form-floating">',
			'#suffix' => '</div></div>',
			'#validated' => TRUE,
			// '#select2' => array(
			// 	'width' => '500',
			// 	//'placeholder' => '- Select -',
			// 	'allowClear' => TRUE
        	// )
		);
		
		
		$form['current_occupation_cs']['cs_occupation_block'] = array(
			'#title' => t('Select Block'),
			'#type' => 'select',
			'#options' => array('' => '-- Select --'),
			'#default_value' => $occupation_block,
			'#required' => TRUE,
			'#prefix' => '<div class="col-md-6" id="block_replace_cs"><div class="form-floating">',
			'#suffix' => '</div></div>',
			'#validated' => TRUE,
			// '#select2' => array(
			// 	'width' => '500',
			// 	//'placeholder' => '- Select -',
			// 	'allowClear' => TRUE
        	// )
		);
		
		if($fetch_data->estate_id != '') {
			$form['current_occupation_cs']['cs_occupation_block'] = array(
				'#title' => t('Select Block'),
				'#type' => 'select',
				//'#options' => get_housing_block_cs($occupation_estate),
				'#options' => $housing_block_arr_1,
				'#default_value' => $occupation_block,
				'#required' => TRUE,
				'#ajax' => array(
							   'event' => 'change',
							   'callback' => '_reload_flat_no_cs',
							   'effect' => 'fade',
							   'progress' => array(
								  'type' => 'throbber',
								  'message' => '',
								),
					),
				'#prefix' => '<div class="col-md-6" id="block_replace_cs"><div class="form-floating">',
				'#suffix' => '</div></div>',
				'#validated' => TRUE,
			);
		}else{
			$form['current_occupation_cs']['cs_occupation_block'] = array(
				'#title' => t('Select Block'),
				'#type' => 'select',
				'#options' => get_housing_block_cs($form_state['values']['cs_occupation_estate']),
				'#default_value' => $occupation_block,
				'#required' => TRUE,
				'#ajax' => array(
							   'event' => 'change',
							   'callback' => '_reload_flat_no_cs',
							   'effect' => 'fade',
							   'progress' => array(
								  'type' => 'throbber',
								  'message' => '',
								),
					),
				'#prefix' => '<div class="col-md-6" id="block_replace_cs"><div class="form-floating">',
				'#suffix' => '</div></div>',
				'#validated' => TRUE,
			);
		}

		$form['current_occupation_cs']['occupation_block_end'] = array(
			'#type' => 'markup',
			'#markup' => '</div>'
		);

		$form['current_occupation_cs']['occupation_flat_start'] = array(
			'#type' => 'markup',
			'#markup' => '<div class="row">'
		);
		
		$form['current_occupation_cs']['cs_occupation_flat'] = array(
			'#title' => t('Flat No'),
			'#type' => 'select',
			'#options' => array('' => '-- Select --'),
			'#default_value' => isset($form_state['values']['cs_occupation_flat']) ? $form_state['values']['cs_occupation_flat'] : '',
			'#required' => TRUE,
			'#prefix' => '<div class="col-md-6" id="flat_no_replace_cs"><div class="form-floating">',
			'#suffix' => '</div></div>',
			'#validated' => TRUE,
		);
		
		
		if($fetch_data->estate_id  != '' && $fetch_data->block_id  != '') {
			$form['current_occupation_cs']['cs_occupation_flat'] = array(
				'#title' => t('Flat No'),
				'#type' => 'select',
				'#options' => $housing_flat_arr_1,
				//'#options' => get_housing_flat_cs($occupation_estate, $occupation_block),
				'#default_value' => isset($form_state['values']['cs_occupation_flat']) ? $form_state['values']['cs_occupation_flat'] : '',
				'#required' => TRUE,
				'#prefix' => '<div class="col-md-6" id="flat_no_replace_cs"><div class="form-floating">',
				'#suffix' => '</div></div>',
				'#validated' => TRUE,
				
			);
		}else{
			$form['current_occupation_cs']['cs_occupation_flat'] = array(
				'#title' => t('Flat No'),
				'#type' => 'select',
				'#options' => get_housing_flat_cs($occupation_estate, $occupation_block),
				'#default_value' => isset($form_state['values']['cs_occupation_flat']) ? $form_state['values']['cs_occupation_flat'] : '',
				'#required' => TRUE,
				'#prefix' => '<div class="col-md-6" id="flat_no_replace_cs"><div class="form-floating">',
				'#suffix' => '</div></div>',
				'#validated' => TRUE,
			);
		}
		
		$form['current_occupation_cs']['cs_possession_date'] = array(
			'#title' => t('Date of Possession'),
			'#type' => 'textfield',
			'#required' => TRUE,
			'#attributes' => array('readonly' => 'readonly', 'id' => 'dop_cs', 'class' => array('form-control form-control-sm')),
			'#default_value' => '',
			//'#validated' => TRUE,
			'#prefix' => '<div class="col-md-6"><div class="form-floating">',
			'#suffix' => '</div></div>',
			'#element_validate' => array('element_validate_date'),
		);

		$form['current_occupation_cs']['possession_date_end'] = array(
			'#type' => 'markup',
			'#markup' => '</div>'
		);
		
		$form['current_occupation_cs']['cs_file_licence'] = array(
			'#title' => t('Upload Current Licence'),
			'#type' => 'managed_file',
			'#description' => t('<b>Allowed Extension: pdf<br>Maximum File Size: 1 MB</b>'),
			'#progress_message' => t('Please wait...'),
			'#progress_indicator' => 'bar',
			'#default_value' => variable_get('Upload File', ''),
			'#upload_validators' => array(
										 'file_validate_extensions' => array("pdf"),
										//'file_validated_size' => array(MAX_FILE_SIZE*1024*1024),
			
									),
			'#upload_location' => 'public://doc/',
			'#required' => TRUE,
			'#process' => array('shifting_of_category_element_process'),
		);
        ///added by dg 20-12-2024///
		$form['current_occupation_cs']['cs_scanned_sign'] = array(
			'#title' => t('Upload Scanned Signature'),
			'#type' => 'managed_file',
			'#description' => t('<b>Allowed Extensions: jpg jpeg<br>Dimensions: 140 pixels (Width) x 60 pixels (Height)<br>Maximum File Size: 50 KB</b>') ,
			'#progress_message' => t('Please wait...'),
			'#progress_indicator' => 'bar',
			'#default_value' => variable_get('Upload File', ''),
			'#upload_validators' => array(
										 'file_validate_extensions' => array("jpg jpeg"),
										//'file_validated_size' => array(MAX_FILE_SIZE*1024*1024),
			
									),
			'#upload_location' => 'public://doc/',
			'#required' => TRUE,
			'#process' => array('shifting_of_category_element_process'),
		);


		
													 
		fetch_cs_data($form);
		
		$form['#attributes'] = array('onsubmit' => 'return validate_cs_application_form()');
		$form['#validate']= array('shifting_of_category_validate');
		$form['#submit']= array('shifting_of_category_submit');
		
	}
	$form['#clientside_validation_settings']['settings']['validate_options']['validate_before_ajax'] = 0 ;
	
	
	// if(isset($form) > 0 && isset($form['current_occupation_cs']['cs_file_licence']) && $form['current_occupation_cs']['cs_file_licence']["#type"] == "managed_file") {
	// 	$form['current_occupation_cs']['cs_file_licence']["#upload_validators"]["file_upload_validation"] = array($form['current_occupation_cs']['cs_file_licence']["#upload_validators"]["file_validate_extensions"][0]);
	// } turned off by debaleena 27-11-2024

	if(isset($form) > 0 && isset($form['current_occupation_cs']['cs_file_licence']) && isset($form['current_occupation_cs']['cs_file_licence']["#type"]) && $form['current_occupation_cs']['cs_file_licence']["#type"] == "managed_file") {
		$form['current_occupation_cs']['cs_file_licence']["#upload_validators"]["file_upload_validation"] = array($form['current_occupation_cs']['cs_file_licence']["#upload_validators"]["file_validate_extensions"][0]);
	} 
  }
  
  function shifting_of_category_validate(&$form, &$form_state) {
	  
	  if($form_state['values']['cs_possession_date'] != '') {
		$date = DateTime::createFromFormat('d/m/Y', $form_state['values']['cs_possession_date']);
		$date_errors = DateTime::getLastErrors();
		if($date_errors['warning_count'] + $date_errors['error_count'] == 0) {
				
			$possession_date = trim( implode('-', array_reverse(explode('/', $form_state['values']['cs_possession_date']))));
			$current_date = date('Y-m-d');
			
			$d1 = new DateTime($possession_date);
			$d2 = new DateTime($current_date);
	
			$diff = $d2->diff($d1);
			
			$result = fetch_current_occupantion_detail();
			if($result->rowcount() > 0) {
				$data = $result->fetchObject();
				$d3 = new DateTime($data->license_issue_date);
				$diff1 = $d1->diff($d3);
				
				if($d1 > $d2) {
					form_set_error('possession_date', t('Possession date can not be after current date.'));
				}
				else {
					if($d1 < $d3) {
						form_set_error('possession_date', t('Possession date can not be before licence issue date.'));
					}
				}
			}
			else {
				if($d1 > $d2) {
					form_set_error('possession_date', t('Possession date can not be after current date1.'));
				}
			}
		
		
		}
	}
	
	  
		if($form_state['values']['pay_band'] == '') {
			form_set_error('pay_band', t('Please select payband.'));
		}
		if($form_state['values']['district'] == '') {
			form_set_error('district', t('Please select district.'));
		}
		
		if($form_state['values']['designation'] == '') {
		  form_set_error('designation', t('Please select ddo designation.'));
		}
	  
		if($form_state['values']['cs_occupation_estate'] == '') {
			form_set_error('cs_occupation_estate', t('Please select the housing'));
		}
		
		if($form_state['values']['cs_occupation_block'] == '') {
			form_set_error('cs_occupation_block', t('Please select the block'));
		}
		
		if($form_state['values']['cs_occupation_flat'] == '') {
			form_set_error('cs_occupation_flat', t('Please select the flat no.'));
		}
			if($form_state['values']['pay_band'] == 1) {
		if($form_state['values']['pay_in'] < 0 || $form_state['values']['pay_in'] > 25999) {
			form_set_error('pay_in', t('Please enter proper Pay in the Pay Band.'));	
			}
		}
		else if($form_state['values']['pay_band'] == 2) {
			if($form_state['values']['pay_in'] < 26000 || $form_state['values']['pay_in'] > 39999) {
				form_set_error('pay_in', t('Please enter proper Pay in the Pay Band.'));	
			}
		}
		else if($form_state['values']['pay_band'] == 3) {
			if($form_state['values']['pay_in'] < 40000 || $form_state['values']['pay_in'] > 51999) {
				form_set_error('pay_in', t('Please enter proper Pay in the Pay Band.'));	
			}
		}
		else if($form_state['values']['pay_band'] == 4) {
			if($form_state['values']['pay_in'] < 52000 || $form_state['values']['pay_in'] > 95099) {
				form_set_error('pay_in', t('Please enter proper Pay in the Pay Band.'));	
			}
		}
		else if($form_state['values']['pay_band'] == 5) {
			if($form_state['values']['pay_in'] < 95100 ) {
				form_set_error('pay_in', t('Please enter proper Pay in the Pay Band.'));	
			}
		}
		
	/*	if($form_state['values']['pay_band'] == 1) {
			if($form_state['values']['pay_in'] < 0 || $form_state['values']['pay_in'] > 7999) {
				form_set_error('pay_in', t('Please enter proper Pay in the Pay Band.'));	
			}
		}
		else if($form_state['values']['pay_band'] == 2) {
			if($form_state['values']['pay_in'] < 8000 || $form_state['values']['pay_in'] > 12499) {
				form_set_error('pay_in', t('Please enter proper Pay in the Pay Band.'));	
			}
		}
		else if($form_state['values']['pay_band'] == 3) {
			if($form_state['values']['pay_in'] < 12500 || $form_state['values']['pay_in'] > 15999) {
				form_set_error('pay_in', t('Please enter proper Pay in the Pay Band.'));	
			}
		}
		else if($form_state['values']['pay_band'] == 4) {
			if($form_state['values']['pay_in'] < 16000) {
				form_set_error('pay_in', t('Please enter proper Pay in the Pay Band.'));	
			}
			else {
				if($form_state['values']['grade_pay'] < 0 || $form_state['values']['grade_pay'] > 7599) {
					form_set_error('grade_pay', t('Please enter proper Grade Pay.'));	
				}		
			}
		}
		else if($form_state['values']['pay_band'] == 5) {
			if($form_state['values']['pay_in'] < 16000) {
				form_set_error('pay_in', t('Please enter proper Pay in the Pay Band.'));	
			}
			else {
				if($form_state['values']['grade_pay'] < 7600) {
					form_set_error('grade_pay', t('Please enter proper Grade Pay.'));	
				}		
			}
		}

		*/
		//echo "<pre>";print_r($form_state['values']);die;
		$cs_file_licence = file_load($form_state['values']['cs_file_licence']);
		if($cs_file_licence->filesize > 1048576) {
			form_set_error('licence_file_size', 'The file '.$cs_file_licence->filename.' could not be uploaded, because it exceeds 1 MB, the maximum allowed size for uploads.');	
		}
		
		$online_application_id = trim($form_state['values']['online_cs_id']);

		/*if($online_application_id == 0) {
			$online_application_id = max_online_application_id(array('reject','cancel'));
			$result1 = fetch_applicant_official_info_rst_to_online_app_id($online_application_id);
			if($result1->rowcount() > 0){
				$data1 = $result1->fetchObject();
				if($form_state['values']['pay_band'] == trim($data1->pay_band_id)) {
					form_set_error('payband_check', 'You can\'t choose same Payband as your previous Payband.');	
				}
			}
		} else {
			$result1 = fetch_applicant_official_info_rst_to_online_app_id($online_application_id);
			if($result1->rowcount() > 0){
				$data1 = $result1->fetchObject();
				if($form_state['values']['pay_band'] != trim($data1->pay_band_id)) {
					form_set_error('payband_check', 'You can\'t choose same Payband as your previous Payband.');	
				}
			}	
		}*/
		
  }
  
  	function shifting_of_category_element_process($element, &$form_state, $form) {
		$element = file_managed_file_process($element, $form_state, $form);
		$element['upload_button']['#access'] = FALSE;
		return $element;
	}
  
  	function shifting_of_category_submit($form, &$form_state) {
		// echo "ppp";die;
		$action = 'draft';
		if($form_state['input']['op'] == 'Apply'){
			$action = 'applied';
		}
		
		$online_application_id = trim($form_state['values']['online_cs_id']);
		//die($action);
		
		if($online_application_id == 0) {
			// echo "kk";die;
			//die('for new'); //first time
			$online_application_id = add_online_application($action,'CS',$form,$form_state);
			add_category_shifting_application($form,$form_state,$online_application_id);
		}
		else {
			// echo "pp";die;
			//die('for existing');//draft
			update_online_application($action,$form,$form_state,$online_application_id);
			update_category_shifting_application($form,$form_state,$online_application_id);
		}
		
		if($action == 'draft') {
			drupal_set_message('Application save as draft.');
		}
		else if($action == 'applied') {
			drupal_set_message('You have successfully applied.');
		}
		
   }
  
function shifting_of_category_permission() {
  return array(
    'administer Application for Shifting of Category' => array(
      'title' => t('Administer Application for Shifting of Category'),
      'description' => t('Perform administer Application for Shifting of Category.'),
    ),
  );
}

function get_housing_estate_cs() {
	
	$housing_estate_arr = array(''=>'-- Select --');
	
	$query=db_select('housing_estate','he');
	$query->fields('he',array('estate_id','estate_name'));
	$query->orderBy('estate_name', 'ASC');
	$result=$query->execute();
	
	foreach($result as $val) {
		$housing_estate_arr[$val->estate_id] = $val->estate_name;
	}
	
	return $housing_estate_arr;
	
}


/*function get_housing_block_cs() {
	
	$housing_block_arr = array();
	
	$query=db_select('housing_block','hb');
	$query->fields('hb',array('block_id','block_name'));
	$query->orderBy('block_name', 'ASC');
	$result=$query->execute();
	
	foreach($result as $val) {
		$housing_block_arr[$val->block_id] = $val->block_name;
	}
	
	return $housing_block_arr;
	
}*/

function get_housing_block_cs($occupation_estate = '') {
	
	$housing_block_arr = array(''=>'-- Select --');
	
	$query=db_select('housing_flat','hf');
	$query->innerJoin('housing_block', 'hb', 'hb.block_id = hf.block_id');
	$query->distinct();
	$query->fields('hb',array('block_id', 'block_name'));
	$query->condition('hf.estate_id', $occupation_estate, '=');
	$query->orderBy('hb.block_name', 'ASC');
	$result=$query->execute();
	
	foreach($result as $val) {
		$housing_block_arr[$val->block_id] = $val->block_name;
	}
	
	return $housing_block_arr;
	
}

function get_housing_flat_cs($occupation_estate = '', $occupation_block = '') {
	
	
	$housing_flat_arr = array('' => '-- Select --');
	if(!empty($occupation_estate) && !empty($occupation_block)) {
		$query=db_select('housing_flat','hf');
		$query->fields('hf',array('flat_id','flat_no'));
		$query->condition('hf.estate_id', $occupation_estate);
		$query->condition('hf.block_id', $occupation_block);
		
		$query->condition('hf.flat_status_id', 2);
		$query->orderBy('flat_id', 'ASC');
		$result=$query->execute();
		
		foreach($result as $val) {
			$housing_flat_arr[$val->flat_id] = $val->flat_no;
		}
	}
	
	return $housing_flat_arr;
	
}

function _reload_block_no_cs($form, &$form_state) {
	$commands = array();
	
	$commands[] = ajax_command_replace('#block_replace_cs', drupal_render($form['current_occupation_cs']['cs_occupation_block']));
	$commands[] = ajax_command_replace('#flat_no_replace_cs', drupal_render($form['current_occupation_cs']['cs_occupation_flat']));
	return array('#type' => 'ajax', '#commands' => $commands);	
}

function _reload_flat_no_cs($form, &$form_state) {
	$commands = array();
	
	$commands[] = ajax_command_replace('#flat_no_replace_cs', drupal_render($form['current_occupation_cs']['cs_occupation_flat']));
	return array('#type' => 'ajax', '#commands' => $commands);
}

	require_once('category_shifting_schema.inc');
	require_once('category_shifting_fetch_data.form.inc');
	require_once('category_shifting_add_update_data.form.inc');
