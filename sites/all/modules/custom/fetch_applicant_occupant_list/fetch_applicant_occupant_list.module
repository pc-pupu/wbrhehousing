<?php
function fetch_applicant_occupant_list_menu(){
    $items = array();

    $items['existing-occupant-list'] = array(
        'title' => 'List for Existing Occupants with HRMS ID',
        'page callback' => 'fetch_existing_occupant_list',
        'page arguments' => array(),
        'access arguments' => array('administer_existing_occupant_applicant_list')
    );

    $items['existing-occupant-list-draft'] = array(
        'title' => 'List for Existing Occupants without HRMS ID',
        'page callback' => 'fetch_existing_occupant_list_draft',
        'page arguments' => array(),
        'access arguments' => array('administer_existing_occupant_applicant_list')
    );

    $items['existing-occupant-details/%'] = array(
        'title' => 'Existing Occupant Details',
        'page callback' => 'existing_occupant_detailed_view_form',
        'page arguments' => array(1),
        'file' => 'exisiting_occupant_detailed_view.inc',
        'access arguments' => array('administer_existing_occupant_applicant_list')
    );
    
    $items['physical-applicant-list'] = array(
        'title' => 'List of Physical Applications',
        'page callback' => 'fetch_physical_applicant_list',
        'page arguments' => array(),
        'access arguments' => array('administer_existing_occupant_applicant_list')
    );

    $items['physical-applicant-details/%'] = array(
        'title' => 'Physical Applicant Details',
        'page callback' => 'physical_applicant_detailed_view_form',
        'page arguments' => array(1),
        'file' => 'physical_applicant_detailed_view.inc',
        'access arguments' => array('administer_existing_occupant_applicant_list')
    );
    return $items;
}

function fetch_applicant_occupant_list_permission() {
    return array(
      'administer_existing_occupant_applicant_list' => array(
        'title' => t('administer Existing Occupant applicant list'),
        'description' => t('Perform administer Existing Occupant applicant list'),
      ),
      
    );
}

function fetch_existing_occupant_list_draft() {
    global $base_root, $base_path,$user;
		$output = '';
                            
        $query = db_select('housing_existing_occupant_draft', 'heod');
        
        $query->innerJoin('housing_flat', 'hf', 'hf.flat_id = heod.flat_id');
        $query->innerJoin('housing_block', 'hb', 'hb.block_id = hf.block_id');
        $query->innerJoin('housing_estate', 'he', 'he.estate_id = hf.estate_id');
        $query->innerJoin('housing_flat_type', 'hft', 'hft.flat_type_id = hf.flat_type_id');
        $query->innerJoin('housing_district', 'hd', 'he.district_code = hd.district_code');

        $query->addField('heod', 'applicant_name');
        $query->fields('he', array('estate_name', 'estate_address'));
        $query->addField('hft', 'flat_type');
        $query->fields('hf', array('floor', 'flat_no'));
        $query->addField('hd', 'district_name');
        $query->addField('hb', 'block_name');
        $query->addField('heod', 'housing_existing_occupant_draft_id');

        $result =$query->execute();

        $header['Serial No.'] = array('data' => 'Serial No.');
        $header['Applicant Name'] = array('data' => 'Applicant Name');
        $header['District'] = array('data' => 'District');
        $header['Estate Name'] = array('data' => 'Estate Name');
        $header['Flat Type'] = array('data' => 'Flat Type');
        $header['Flat No.'] = array('data' => 'Flat No.');
        $header['Floor'] = array('data' => 'Floor');
        $header['Details'] = array('data' => 'Details');
        

        $rows =array();
        $output = '';
        $serialNumber = 1;
		
		while($data = $result->fetchObject()) {
            // print_r($data);die;
			$fields = array();
      
			$fields[] = $serialNumber;
			$fields[] = $data->applicant_name;
            $fields[] = $data->district_name;
			$fields[] = $data->estate_name;
			$fields[] = $data->flat_type;
			$fields[] = $data->flat_no;
			$fields[] = $data->floor;
			// if($data->status == 0){
			// 	$fields[] = 'Pending Approval at Division Level';
			// }else{
			// 	$fields[] = 'Approved by Division';
			// }
			$fields[] = l(
            'View Details',
            'existing-occupant-view-det-draft/'. encrypt_url($data->housing_existing_occupant_draft_id),
            array(
                'html'=>TRUE,
                'attributes'=> array('class'=>array('btn bg-success btn-sm px-4 rounded-pill text-white fw-bolder')),
            ));	
			$serialNumber++;

			$rows[] = $fields;
			
		}

		$variables = array(
			'attributes' => array('class'=>array('table table-list table-striped')),
			'header' => $header,
			'rows' => $rows,
			'sticky' => true,
			'empty' => t("No data found!")
		  );
  		//end

		if(count($rows) > 0) {
			// Render using Drupal's render API.
			$build['datatable'] = array(
			  '#theme' => 'datatable',
			  '#header' => $header,
			  '#rows' => $rows,
			  '#attributes' => array(),
			);
			
			// Or, render using a theme function.
			$variables = array(
			  'attributes' => array('class'=>array('table table-list table-striped')),
			  'header' => $header,
			  'rows' => $rows,
			);
			
			$output = theme('datatable', $variables);
		}
		else {
			$output = '<div>
							<table class="datatable_no_data_found table table-list">
								<tr class="tr_no_data_found">
									<th class="th_no_data_found"></th>
								</tr>
								<tr class="tr_no_data_found">
									<td class="td_no_data_found">No data found!</td>
								</tr>
							</table>
						</div>';
		}
	
		return $output;
}

function fetch_existing_occupant_list() {
    global $base_root, $base_path,$user;
    $output = '';
		
		/* Done by Subham 30-12-2024*/
        $query_dtls = db_select('users_details', 'ud'); 
        $query_dtls->fields('ud');
        $query_dtls->condition('uid',$user->uid,'=');
        $rsult = $query_dtls->execute();
        $data_fetch = $rsult->fetchObject();
        /* End */


        $query = db_select('housing_applicant', 'ha');

        // $query->innerJoin('housing_applicant_official_detail', 'haod', 'ha.uid = haod.uid');  //off by dg 30-12-2024
        $query->innerJoin('housing_applicant_official_detail', 'haod', 'ha.housing_applicant_id = haod.housing_applicant_id');  //added by dg 30-12-2024 
        $query->innerJoin('housing_online_application', 'hoa', 'hoa.applicant_official_detail_id = haod.applicant_official_detail_id');
        $query->innerJoin('housing_flat_occupant', 'hfo', 'hfo.online_application_id = hoa.online_application_id');
        $query->innerJoin('housing_flat', 'hf', 'hf.flat_id = hfo.flat_id');
        $query->innerJoin('housing_estate', 'he', 'he.estate_id = hf.estate_id');
        $query->innerJoin('housing_flat_type', 'hft', 'hft.flat_type_id = hf.flat_type_id');
        $query->innerJoin('users', 'u', 'u.uid = haod.uid');
        // $query->leftJoin('users', 'u', 'u.uid = haod.uid');

        $query->condition('hoa.status', 'existing_occupant', '=');
        // $query->condition('haod.is_active', 1, '=');

        $query->addField('ha', 'applicant_name');
        $query->addField('he', 'estate_name');
        $query->addField('hft', 'flat_type');
        $query->addField('haod', 'hrms_id');
        $query->addField('u', 'status');
        $query->addField('haod', 'uid');

        $result =$query->execute();
        

        $header['Serial No.'] = array('data' => 'Serial No.');
        $header['Applicant Name'] = array('data' => 'Applicant Name');
        $header['HRMS Code'] = array('data' => 'HRMS Code');
        $header['Estate Name'] = array('data' => 'Estate Name');
        $header['Flat Type'] = array('data' => 'Flat Type');
        $header['Approval Status'] = array('data' => 'Approval Status');
        $header['Details'] = array('data' => 'Details');

        $rows =array();
        $output = '';
        $serialNumber = 1;
    
    while($data = $result->fetchObject()) {
        $fields = array();
  
        $fields[] = $serialNumber;
        $fields[] = $data->applicant_name;
        $fields[] = $data->hrms_id;
        $fields[] = $data->estate_name;
        $fields[] = $data->flat_type;
        if($data->status == 0){
            $fields[] = 'Pending Approval at Division Level';
        }else{
            $fields[] = 'Approved by Division';
        }
        $fields[] = l(
        'View Details',
        'existing-occupant-view-det/'. encrypt_url($data->uid),
        array(
            'html'=>TRUE,
            'attributes'=> array('class'=>array('btn bg-success btn-sm px-4 rounded-pill text-white fw-bolder')),
        ));	
        $serialNumber++;

        $rows[] = $fields;
        
    }

    $variables = array(
        'attributes' => array('class'=>array('table table-list table-striped')),
        'header' => $header,
        'rows' => $rows,
        'sticky' => true,
        'empty' => t("No data found!") // The message to be displayed if table is empty
      );
      //end

    if(count($rows) > 0) {
        // Render using Drupal's render API.
        $build['datatable'] = array(
          '#theme' => 'datatable',
          '#header' => $header,
          '#rows' => $rows,
          '#attributes' => array(),
        );
        
        // Or, render using a theme function.
        $variables = array(
          'attributes' => array('class'=>array('table table-list table-striped')),
          'header' => $header,
          'rows' => $rows,
        );
        
        $output = theme('datatable', $variables);
    }
    else {
        $output = '<div>
                        <table class="datatable_no_data_found table table-list">
                            <tr class="tr_no_data_found">
                                <th class="th_no_data_found"></th>
                            </tr>
                            <tr class="tr_no_data_found">
                                <td class="td_no_data_found">No data found!</td>
                            </tr>
                        </table>
                    </div>';
    }

    return $output;
}
   
/////////////////////////////subham///////////////////////////////
//  $output = $result->fetchAll();

//     if (count($output) > 0) {
//         $output1 .= '<table class="table table-list">';
//         $output1 .= '<tr><th>Serial No</th><th>Application No</th><th>&emsp;Applicant Name</th><th>Designation</th><th>&emsp;&emsp;&emsp;View</th>';
//         $serialNumber = 1;
//         foreach ($output as $data) {
//             $output1 .= '<tr>';
//             $output1 .= '<td>&emsp;'.$serialNumber.'</td>';
//             $output1 .= '<td>'.$data->application_no.'</td>';
//             $output1 .= '<td>'.$data->applicant_name.'</td>';
//             $output1 .= '<td>'.$data->applicant_designation.'</td>';
//             $output1 .= '<td>' . l(t('View Details'), $base_root.$base_path.'existing-occupant-details/'. encrypt_url($data->application_no), array('html' => true, 'attributes' => array('class' => array('btn', 'bg-success', 'btn-sm', 'px-3', 'rounded-pill', 'text-white', 'fw-bolder')))) . '</td>';
//             $output1 .= '</tr>';
//             $serialNumber++;
//         }
//         $output1 .= '</table>';
//     } else {
//         $output1 .= '<p>No data found!</p>';
//     }
//     return $output1;


function fetch_physical_applicant_list() {
    global $base_root, $base_path;
    $output1 = '';
    $query = "SELECT hoa.application_no, ha.applicant_name, haod.applicant_designation
              FROM housing_online_application hoa
              INNER JOIN housing_applicant_official_detail haod ON hoa.applicant_official_detail_id = haod.applicant_official_detail_id
              INNER JOIN housing_applicant ha ON ha.uid = haod.uid
              WHERE hoa.application_no LIKE 'PA%'";
    $result = db_query($query);


    ///////////////////debaleena 23-09-2024////////////////////////
    $header['application_no'] = array('data' => 'Application No');
    $header['applicant_name'] = array('data' => 'Applicant Name');
    $header['applicant_designation'] = array('data' => 'Designation');
    $header['view'] = array('data' => 'View');
    
        

        
   $rows =array();
   $output = '';
   
   while($data = $result->fetchObject()) {
       $fields = array();

       $fields[] = $data->application_no;
       $fields[] = $data->applicant_name;
       $fields[] = $data->applicant_designation;

       $fields[] = l(
               '<span class="btn bg-success btn-sm fa fa-eye text-white rounded" style="font-size:12px" ></span>' ,
               'physical-applicant-details/'.encrypt_url($data->application_no).'/', 
               array('html'=>TRUE,'attributes'=> array('target' => '_blank'))
   
           );
      
       $rows[] = $fields;
   }

        

        $variables = array(
            'attributes' => array('class'=>array('table table-list table-striped')),
            'header' => $header,
            'rows' => $rows,
            'sticky' => true,
            'empty' => t("No data found!") // The message to be displayed if table is empty
            );
            //end
        //sd turned off 21-06-2024
        if(count($rows) > 0) {
            // Render using Drupal's render API.
            $build['datatable'] = array(
                '#theme' => 'datatable',
                '#header' => $header,
                '#rows' => $rows,
                '#attributes' => array(),
            );
            
            // Or, render using a theme function.
            $variables = array(
                'attributes' => array('class'=>array('table table-list table-striped')),
                'header' => $header,
                'rows' => $rows,
            );
            
            $output = theme('datatable', $variables);
        }
        else {
            $output = '<div>
                            <table class="datatable_no_data_found table table-list">
                                <tr class="tr_no_data_found">
                                    <th class="th_no_data_found"></th>
                                </tr>
                                <tr class="tr_no_data_found">
                                    <td class="td_no_data_found">No data found!</td>
                                </tr>
                            </table>
                        </div>';
        }

   return $output;

////////////////////subham////////////////////////////
    // $output = $result->fetchAll();

    // if (count($output) > 0) {
    //     $output1 .= '<table class="table table-list">';
    //     $output1 .= '<tr><th>Serial No</th><th>Application No</th><th>&emsp;Applicant Name</th><th>Designation</th><th>&emsp;&emsp;&emsp;View</th>';
    //     $serialNumber = 1;
    //     foreach ($output as $data) {
    //         $output1 .= '<tr>';
    //         $output1 .= '<td>&emsp;'.$serialNumber.'</td>';
    //         $output1 .= '<td>'.$data->application_no.'</td>';
    //         $output1 .= '<td>'.$data->applicant_name.'</td>';
    //         $output1 .= '<td>'.$data->applicant_designation.'</td>';
    //         $output1 .= '<td>' . l(t('View Details'), $base_root.$base_path.'physical-applicant-details/'. encrypt_url($data->application_no), array('html' => true, 'attributes' => array('class' => array('btn', 'bg-success', 'btn-sm', 'px-3', 'rounded-pill', 'text-white', 'fw-bolder')))) . '</td>';
    //         $output1 .= '</tr>';
    //         $serialNumber++;
    //     }
    //     $output1 .= '</table>';
    // } else {
    //     $output1 .= '<p>No data found!</p>';
    // }
    // return $output1;
}
