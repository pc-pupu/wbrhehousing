<?php

	function existing_occupant_init() {
		drupal_add_library('system','ui.datepicker');
		
		drupal_add_css(drupal_get_path('module', 'common_application') . '/css/select2.min.css');
		drupal_add_js(drupal_get_path('module', 'common_application') . '/js/select2.min.js');
	}
	
	function existing_occupant_menu() {
		$items = array();
		/*$items['existing_occupant_search'] = array(
			'title'=>'Search Existing Occupant',
			'page callback'=>'drupal_get_form',
			'page arguments'=>array('existing_occupant_search_form'),
			'file' => 'include/existing_occupant_search_form.inc',
			'access arguments' => array('administer Existing Occupant Form'),
			//'access callback'=>TRUE
		);
		
		$items['all_ready_existing_occupant/%'] = array(
			'title'=>'Existing Occupant Data Entry',
			'page callback'=>'drupal_get_form',
			'page arguments'=>array('all_ready_existing_occupant_form',1),
			'file' => 'include/all_ready_existing_occupant_form.inc',
			'access arguments' => array('administer Existing Occupant Form'),
			//'access callback'=>TRUE
		);
		
		$items['existing_occupant'] = array(
			'title'=>'Existing Occupant Data Entry',
			'page callback'=>'drupal_get_form',
			'page arguments'=>array('existing_occupant_form',1),
			'file' => 'include/existing_occupant_form.inc',
			'access arguments' => array('administer Existing Occupant Form'),
			//'access callback'=>TRUE
		);*/
		
		
		$items['rhewise_flatlist'] = array(
	  		'title' => 'RHEwise Flat List',
			'page callback' => 'drupal_get_form',
			'page arguments' => array('rhewise_flatlist_form'),
	  		'file' => 'include/rhewise_flatlist_page.inc',
	  		'access arguments' => array('administer Existing Occupant'),
		);
		
		$items['rhewise_occupant_data_entry/%'] = array(
			'title'=>'Flatwise Occupant Data Entry',
			'page callback'=>'drupal_get_form',
			'page arguments'=>array('existing_occupant_form',1),
			'file' => 'include/existing_occupant_form.inc',
			'access arguments' => array('administer Existing Occupant'),
			//'access callback'=>TRUE
		);
		
		$items['rhewise_occupantlist'] = array(
	  		'title' => 'RHEwise Occupant List',
			'page callback' => 'drupal_get_form',
			'page arguments' => array('rhewise_occupantlist_form'),
	  		'file' => 'include/rhewise_occupantlist_page.inc',
	  		'access arguments' => array('administer Existing Occupant List'),
		);
		
		$items['update_occupant_status/%/%'] = array(
		  'title' => 'Update Occupant Status',	
		  'page callback' => 'occupant_status_update',
		  'page arguments' => array(1, 2),
		  'access arguments' => array('administer Existing Occupant List'),
		);
		
		return $items;	
		
	}
	
	function existing_occupant_permission() {
		return array(
			'administer Existing Occupant' => array(
				'title' => t('Administer Existing Occupant'),
				'description' => t('Perform Administer Existing Occupant Data Entry.'),
			),
			
			'administer Existing Occupant List' => array(
				'title' => t('Administer Existing Occupant List'),
				'description' => t('Perform Administer Existing Occupant List Verification and Approval.'),
			),
		);	
	}
	
	
	/*function get_housing_flat1($occupation_estate = '', $occupation_block = '') {
	
	
		$housing_flat_arr = array('' => '-- select --');
		if(!empty($occupation_estate) && !empty($occupation_block)) {
			$query=db_select('housing_flat','hf');
			$query->fields('hf',array('flat_id','flat_no'));
			$query->condition('hf.estate_id', $occupation_estate);
			$query->condition('hf.block_id', $occupation_block);
			
			//$query->condition('hf.flat_status_id', 2);
			//$query->condition('hf.flat_category_id', 1);
			$query->orderBy('flat_no', 'ASC');
			$result=$query->execute();
			
			foreach($result as $val) {
				$housing_flat_arr[$val->flat_id] = $val->flat_no;
			}
		}
		
		return $housing_flat_arr;
	
	}*/
	
	function get_occupant_rhe_details($flat_id = '') {
		if($flat_id !== '' && is_numeric($flat_id)) {	
			$query = db_select('housing_flat', 'hf');
			$query->innerJoin('housing_estate', 'he','he.estate_id = hf.estate_id');
			$query->innerJoin('housing_district', 'hd','he.district_code = hd.district_code');
			$query->innerJoin('housing_block', 'hb', 'hb.block_id = hf.block_id');
			$query->innerJoin('housing_flat_status', 'hfs','hfs.flat_status_id = hf.flat_status_id');
			$query->innerJoin('housing_flat_category', 'hfc','hfc.flat_category_id = hf.flat_category_id');
			$query->innerJoin('housing_flat_type', 'hft','hft.flat_type_id = hf.flat_type_id');
			$query->addField('hf', 'flat_id');
			$query->addField('hf', 'flat_no');
			$query->addField('hf', 'estate_id');
			$query->addField('hf', 'flat_type_id');
			$query->addField('hf', 'block_id');
			$query->addField('hf', 'floor');
			$query->addField('hf', 'flat_status_id');
			$query->addField('hf', 'flat_category_id');
			$query->addField('he', 'estate_name');
			$query->addField('he', 'estate_address');
			$query->addField('hd', 'district_name');
			$query->addField('hb', 'block_name');	
			$query->addField('hfs', 'flat_status');
			$query->addField('hfc', 'flat_category');
			$query->addField('hft', 'flat_type');
			$query->condition('hf.flat_id', $flat_id, '=');
			return $query->execute();
		}
	}
	
	function flat_type_under_rhe($rhe_name = '') {
		$flat_type_options = array();
		if($rhe_name !== '' && is_numeric($rhe_name)) {
			$query = db_select('housing_flat', 'hf');
			$query->innerJoin('housing_flat_type', 'hft', 'hft.flat_type_id = hf.flat_type_id');
			$query->addField('hf', 'flat_type_id');	
			$query->addField('hft', 'flat_type');
			$query->condition('hf.estate_id', $rhe_name, '=');
			$query->groupBy('hf.flat_type_id');
			$query->groupBy('hft.flat_type');
			$result = $query->execute();
			
			if($result->rowCount() > 0) {
				foreach($result as $val) {
					$flat_type_options[$val->flat_type_id] = $val->flat_type;
				}
				return $flat_type_options;
			} else {
				$flat_type_options[''] = 'No Data Found';
				return $flat_type_options;		
			}
		}
	}
	
	function block_name_under_rhe($rhe_name = '', $flat_type = '') {
		$block_name_options = array();
		if($rhe_name !== '' && $flat_type !== '' && is_numeric($rhe_name) && is_numeric($flat_type)) {
			$query = db_select('housing_flat', 'hf');
			$query->innerJoin('housing_block', 'hb', 'hb.block_id = hf.block_id');
			$query->addField('hf', 'block_id');	
			$query->addField('hb', 'block_name');
			$db_and = db_and();
			$db_and->condition('hf.estate_id', $rhe_name, '=');
			$db_and->condition('hf.flat_type_id', $flat_type, '=');
			$query->condition($db_and);
			$query->groupBy('hf.block_id');
			$query->groupBy('hb.block_name');
			$query->orderBy('hb.block_name', 'ASC');
			$result = $query->execute();
			
			if($result->rowCount() > 0) {
				foreach($result as $val) {
					$block_name_options[$val->block_id] = $val->block_name;
				}
				return $block_name_options;
			} else {
				$block_name_options[''] = 'No Data Found';
				return $block_name_options;		
			}
		}
	}
	
	function floor_under_rhe($rhe_name = '', $flat_type = '', $block_name = '') {
		$floor_options = array();
		if($rhe_name !== '' && $flat_type !== '' && $block_name !== '' && is_numeric($rhe_name) && is_numeric($flat_type) && is_numeric($block_name)) {
			$query = db_select('housing_flat', 'hf');
			$query->addField('hf', 'floor');
			$db_and = db_and();
			$db_and->condition('hf.estate_id', $rhe_name, '=');
			$db_and->condition('hf.flat_type_id', $flat_type, '=');
			$db_and->condition('hf.block_id', $block_name, '=');
			$query->condition($db_and);
			$query->groupBy('hf.floor');
			$result = $query->execute();
			
			if($result->rowCount() > 0) {
				foreach($result as $val) {
					if($val->floor == 'G')
						$floor_name = 'Ground';
					else if($val->floor == 'F')
						$floor_name = 'First';
					else if($val->floor == 'S')
						$floor_name = 'Second';
					else if($val->floor == 'T')
						$floor_name = 'Third';
						
					$floor_options[$val->floor] = $floor_name;
				}
				return $floor_options;
			} else {
				$floor_options[''] = 'No Data Found';
				return $floor_options;		
			}
		}
	}
	
	function rhe_flattype_block_floor_wise_flat_list($rhe_name = '', $flat_type = '', $block_name = '', $floor = '') {
		
		if($rhe_name != 0 && $flat_type != 0 && $block_name != 0 && $floor != '') {
			$query = db_select('housing_flat', 'hf');
			$query->innerJoin('housing_estate', 'he', 'he.estate_id = hf.estate_id');
			$query->innerJoin('housing_district', 'hd', 'he.district_code = hd.district_code');
			$query->innerJoin('housing_block', 'hb', 'hb.block_id = hf.block_id');
			$query->innerJoin('housing_flat_status', 'hfs', 'hfs.flat_status_id = hf.flat_status_id');
			$query->innerJoin('housing_flat_category', 'hfc', 'hfc.flat_category_id = hf.flat_category_id');
			$query->innerJoin('housing_flat_type', 'hft', 'hft.flat_type_id = hf.flat_type_id');
			$query->addField('hf', 'flat_id');
			$query->addField('hf', 'flat_no');
			$query->addField('hf', 'estate_id');
			$query->addField('hf', 'flat_type_id');
			$query->addField('hf', 'block_id');
			$query->addField('hf', 'floor');
			$query->addField('hf', 'flat_status_id');
			$query->addField('hf', 'flat_category_id');
			$query->addField('he', 'estate_name');
			$query->addField('he', 'estate_address');
			$query->addField('hd', 'district_name');
			$query->addField('hb', 'block_name');	
			$query->addField('hfs', 'flat_status');
			$query->addField('hfs', 'flat_status_code');
			$query->addField('hfc', 'flat_category');
			$query->addField('hfs', 'is_occupied');
			$query->addField('hft', 'flat_type');
			$db_and = db_and();
			$db_and->condition('hf.estate_id', $rhe_name, '=');
			$db_and->condition('hf.flat_type_id', $flat_type, '=');
			$db_and->condition('hf.block_id', $block_name, '=');
			$db_and->condition('hf.floor', $floor, '=');
			$query->condition($db_and);
			$query->orderBy('flat_id', 'ASC');
			
			//echo $query;
			return $query->execute();	
		}
	}
	
	function occupant_entry_check($flat_id = '') {
		if($flat_id != 0) {
			$query = db_select('housing_flat_occupant', 'hfo');
			$query->addField('hfo', 'flat_id');
			$query->addField('hfo', 'online_application_id');
			$query->condition('hfo.flat_id', $flat_id, '=');
			return $query->execute();		
		}
	}
	
	function flatwise_occupantlist($flat_id = '') {
		if($flat_id != 0) {
			$query = db_select('users', 'u');
			$query->innerJoin('users_roles', 'ur', 'ur.uid = u.uid');
			$query->innerJoin('housing_applicant', 'ha', 'ha.uid = u.uid');
			$query->innerJoin('housing_applicant_official_detail', 'haod', 'haod.uid = u.uid');
			$query->innerJoin('housing_online_application', 'hoa', 'hoa.applicant_official_detail_id = haod.applicant_official_detail_id');
			$query->innerJoin('housing_new_allotment_application', 'hnaa', 'hnaa.online_application_id = hoa.online_application_id');
			$query->innerJoin('housing_flat_occupant', 'hfo', 'hfo.online_application_id = hoa.online_application_id');
			$query->fields('u');
			$query->addField('u', 'status', 'user_status');
			$query->fields('ur');
			$query->fields('ha');
			$query->fields('haod');
			$query->fields('hoa');
			$query->fields('hnaa');
			$query->fields('hfo');
			$db_and = db_and();
			$db_and->condition('hfo.flat_id', $flat_id, '=');
			$db_and->condition('ur.rid', 5, '=');
			$db_and->condition('hoa.is_backlog_applicant', 2, '=');
			$db_and->condition('hoa.status', 'allotted', '=');
			$query->condition($db_and);
			$query->orderBy('u.uid', 'ASC');
			return $query->execute();		
		}
	}
	
	function occupant_status_update($user_id = 0, $status = '') {
		$uid = decrypt_url($user_id);
		$status = decrypt_url($status);
		
		if($status == 'approve') {
			db_update('users')
			->fields(array(
				'status' => 1,
				)
			)
			->condition('uid',$uid, '=')
			->execute();
			
			drupal_set_message('Occupant has been verified and approved.');
			drupal_goto('rhewise_occupantlist');
		}
		elseif($status == 'reject') {
			db_delete('users')
			->condition('uid',$uid, '=')
			->execute();
			
			db_delete('users_roles')
			->condition('uid',$uid, '=')
			->execute();
			
			drupal_set_message('Occupant entry has been deleted.');
			drupal_goto('rhewise_occupantlist');
		}
	}