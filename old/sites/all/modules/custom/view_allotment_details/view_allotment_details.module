<?php

	function view_allotment_details_info() {
		
	}
	
	function view_allotment_details_menu() {
		$items = array();
		
		$items['view_allotment_details'] = array(
			/*'title' => 'View Offer of Allotment Details(New Allotment)',*/ //sd turned off 20-06-2024
			'title' => 'Allotment Details (New Allotment)',// sd 20-06-2024
			'page callback' => 'view_allotment_details_page',
			'file' => 'include/view_allotment_details_page.inc',
			'access arguments' => array('administer View Allotment Details')
		
		);
		
		$items['status_update/%/%'] = array(
			'title' => 'Status Update',
			'page callback' => 'status_update_page',
			'page arguments' => array(1,2),
			'file' => 'include/status_update_page.inc',
			'access arguments' => array('administer Status Update')
		
		);
		
		$items['allotment_detail_pdf_gen/%/%'] = array(
		  'page callback' => 'allotment_detail_pdf_gen',
		  'page arguments' => array(1,2),
		  'file' => 'include/allotment_detail_pdf_gen.inc',
		  'access arguments' => array('administer Generate PDF of Allotment Details'),
		  'access callback' => TRUE,
		);

		$items['download-and-upload'] = array(
			'title' => 'Documents Download',
			'page callback' => 'drupal_get_form',
			'page arguments' => array('download_and_upload',1),
			'file' => 'include/download_and_upload.inc',
			'access arguments' => array('administer Generate PDF of Allotment Details'),
			'access callback' => TRUE,
		);

		$items['form-of-application/%'] = array(
			'title' => 'Generate Allotment Letter',
			'page callback' => 'generate_application_form_pdf',
			'page arguments' => array(1),
			'file' => 'include/allotment_detail_pdf_gen.inc',
			'access arguments' => array('access content'),
		);
			
		$items['generate-declaration/%'] = array(
			'title' => 'Generate Allotment Letter',
			'page callback' => 'generate_declaration_form_pdf',
			'page arguments' => array(1),
			'file' => 'include/allotment_detail_pdf_gen.inc',
			'access arguments' => array('access content'),
		);


		
		return $items;
	}
	
	function view_allotment_details_permission() {
		return array(
			'administer View Allotment Details' => array(
				'title' => t('administer View Allotment Details'),
				'description' => t('Perform administer View Allotment Details'),
			),
			
			'administer Status Update' => array(
				'title' => t('administer Status Update'),
				'description' => t('Perform administer Status Update.'),
			),
			
			'administer Generate PDF of Allotment Details' => array(
				'title' => t('administer Generate PDF of Allotment Details'),
				'description' => t('Perform administer Generate PDF of Allotment Details'),
			),
		);	
	}
	
	function fetch_allotment_details($online_application_id = '') {
		global $user;
		$query = db_select('housing_applicant_official_detail', 'haod');
		//$query->innerJoin('housing_applicant', 'ha', 'ha.uid = haod.uid');  turned off by debaleena 05-12-2024
		$query->innerJoin('housing_applicant', 'ha','ha.housing_applicant_id = haod.housing_applicant_id'); //added by debaleena 05-12-2024
		$query->innerJoin('housing_online_application', 'hoa', 'hoa.applicant_official_detail_id = haod.applicant_official_detail_id');
		$query->innerJoin('housing_new_allotment_application', 'hnaa', 'hnaa.online_application_id = hoa.online_application_id');
		$query->innerJoin('housing_flat_occupant', 'hfo', 
		'hfo.online_application_id = hoa.online_application_id');
		$query->innerJoin('housing_flat', 'hf', 
		'hf.flat_id = hfo.flat_id');
		$query->innerJoin('housing_estate', 'he', 
		'hf.estate_id = he.estate_id');
		$query->innerJoin('housing_flat_type', 'hft', 
		'hf.flat_type_id = hft.flat_type_id');
		$query->innerJoin('housing_district', 'hd', 
		'he.district_code = hd.district_code');
		$query->innerJoin('housing_block', 'hb', 
		'hb.block_id = hf.block_id');    //debaleena 29-07-2024
		$query->fields('ha', array());
		$query->addField('hoa', 'online_application_id');
		$query->addField('hoa', 'status');
		$query->addField('hfo', 'allotment_no');
		$query->addField('hfo', 'allotment_date');
		$query->addField('hfo', 'flat_id');
		$query->addField('hfo', 'accept_reject_status');
		$query->addField('hfo', 'allotment_approve_or_reject_date');
		$query->addField('hf', 'flat_no');
		$query->addField('hft', 'flat_type');
		$query->addField('he', 'estate_name');
		$query->addField('he', 'estate_address');
		$query->addField('hd', 'district_name');
		$query->addField('hb', 'block_name');  //debaleena 29-07-2024
		$query->addField('hf', 'floor');  //debaleena 29-07-2024
		
		// allowed application to view
		$status_arr = array('housing_official_approved','allotted','applicant_acceptance','applicant_reject','ddo_verified_2','ddo_reject_2','housing_sup_approved_2','housing_sup_reject_2','license_generate','offer_letter_extended');


		if($online_application_id == ''){
			$db_and = db_and();
			$db_and->condition('haod.uid', $user->uid, '=');
			// $db_and->condition('hoa.status', 'allotted_approved', '=');
			$db_and->condition('hoa.status', $status_arr, 'in');
			$query->condition($db_and);
		} else{
			$db_and = db_and();
			$db_and->condition('hoa.online_application_id', $online_application_id, '=');
			// $db_and->condition('hoa.status', 'allotted_approved', '=');
			$db_and->condition('hoa.status', $status_arr, 'in');
			$query->condition($db_and);
		}
		
		// echo $query;die();
		return $query->execute();
	}

	function get_applicant_info($online_application_id = '') {
		global $user;
		$query = db_select('housing_applicant_official_detail', 'haod');
		$query->innerJoin('housing_applicant', 'ha', 'ha.uid = haod.uid');
		$query->innerJoin('housing_online_application', 'hoa', 'hoa.applicant_official_detail_id = haod.applicant_official_detail_id');
		//$query->innerJoin('housing_new_allotment_application', 'hnaa', 'hnaa.online_application_id = hoa.online_application_id');
		$query->innerJoin('housing_district', 'hd', 'ha.permanent_district = hd.district_code');
	
		$query->fields('ha', array());
		$query->fields('haod', array());
		$query->fields('hoa', array());
		$query->fields('hd', array());
		
		if($online_application_id == ''){
			$db_and = db_and();
			$db_and->condition('haod.uid', $user->uid, '=');
			// $db_and->condition('hoa.status', 'allotted_approved', '=');
			$db_and->condition('hoa.status', 'housing_official_approved', '=');
			$query->condition($db_and);
		} else{
			$db_and = db_and();
			$db_and->condition('hoa.online_application_id', $online_application_id, '=');
			// $db_and->condition('hoa.status', 'allotted_approved', '=');
			$db_and->condition('hoa.status', 'housing_official_approved', '=');
			$query->condition($db_and);
		}
		
		return $query->execute();
	}

	function get_applicant_housing_info($online_application_id = '') {

		global $user;
		$query = db_select('housing_online_application', 'hoa');
		$query->innerJoin('housing_flat_occupant', 'hfo', 'hfo.online_application_id = hoa.online_application_id');
		$query->innerJoin('housing_flat', 'hf', 'hf.flat_id = hfo.flat_id');
		$query->innerJoin('housing_estate', 'he','hf.estate_id = he.estate_id');
		$query->innerJoin('housing_flat_type', 'hft','hf.flat_type_id = hft.flat_type_id');
		$query->innerJoin('housing_district', 'hd','he.district_code = hd.district_code');
		$query->fields('hoa', array());
		$query->fields('he', array('estate_name','estate_address'));
		$query->fields('hf', array());
		$query->fields('hft', array());

		if($online_application_id == ''){
			$db_and = db_and();
			$db_and->condition('hoa.status', 'housing_official_approved', '=');
			$query->condition($db_and);
		} else{
			$db_and = db_and();
			$db_and->condition('hoa.online_application_id', $online_application_id, '=');
			$db_and->condition('hoa.status', 'housing_official_approved', '=');
			$query->condition($db_and);
		}
		
		return $query->execute();

	}
	
	
	/*function fetch_accept_reject_status() {
		global $user;
		$query = db_select('housing_applicant_official_detail', 'haod');
		$query->innerJoin('housing_applicant', 'ha', 'ha.uid = haod.uid');
		$query->innerJoin('housing_online_application', 'hoa', 'hoa.applicant_official_detail_id = haod.applicant_official_detail_id');
		$query->innerJoin('housing_flat_occupant', 'hfo', 
		'hfo.online_application_id = hoa.online_application_id');
		$query->fields('ha', array());
		$query->addField('hoa', 'online_application_id');
		$query->addField('hfo', 'accept_reject_status');
		$query->condition('haod.uid', $user->uid, '=');
		$query->condition('hfo.accept_reject_status', NULL, 'is');
		
		//echo $query;
		return $query->execute();
	}*/

	// added by moumita
	function get_applicant_upload_docs($app_id = ''){
		global $user;
		// echo $user->uid;die;
		$query = db_select('housing_online_application_upload_doc', 'haupdoc');
		$query->fields('haupdoc', array());
		if($app_id!=''){
			$query->condition('haupdoc.online_application_id', $app_id, '=');
		}else{
			$query->condition('haupdoc.uid', $user->uid, '=');
		}
		return $query->execute();
		// $result = $query->execute()->fetchObject();
		// print_r($result);die;
	}

	/// end////////


	
